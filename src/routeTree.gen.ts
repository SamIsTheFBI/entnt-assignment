/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as IndexRouteImport } from './routes/index'
import { Route as DemoTanstackQueryRouteImport } from './routes/demo.tanstack-query'
import { Route as AuthenticatedDashboardRouteRouteImport } from './routes/_authenticated/dashboard/route'
import { Route as AuthenticatedDashboardAssessmentBuilderRouteImport } from './routes/_authenticated/dashboard/assessment-builder'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const DemoTanstackQueryRoute = DemoTanstackQueryRouteImport.update({
  id: '/demo/tanstack-query',
  path: '/demo/tanstack-query',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardRouteRoute =
  AuthenticatedDashboardRouteRouteImport.update({
    id: '/_authenticated/dashboard',
    path: '/dashboard',
    getParentRoute: () => rootRouteImport,
  } as any)
const AuthenticatedDashboardAssessmentBuilderRoute =
  AuthenticatedDashboardAssessmentBuilderRouteImport.update({
    id: '/assessment-builder',
    path: '/assessment-builder',
    getParentRoute: () => AuthenticatedDashboardRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/assessment-builder': typeof AuthenticatedDashboardAssessmentBuilderRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/dashboard': typeof AuthenticatedDashboardRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/dashboard/assessment-builder': typeof AuthenticatedDashboardAssessmentBuilderRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRouteRouteWithChildren
  '/demo/tanstack-query': typeof DemoTanstackQueryRoute
  '/_authenticated/dashboard/assessment-builder': typeof AuthenticatedDashboardAssessmentBuilderRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/dashboard/assessment-builder'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/dashboard'
    | '/demo/tanstack-query'
    | '/dashboard/assessment-builder'
  id:
    | '__root__'
    | '/'
    | '/login'
    | '/_authenticated/dashboard'
    | '/demo/tanstack-query'
    | '/_authenticated/dashboard/assessment-builder'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRoute
  AuthenticatedDashboardRouteRoute: typeof AuthenticatedDashboardRouteRouteWithChildren
  DemoTanstackQueryRoute: typeof DemoTanstackQueryRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/demo/tanstack-query': {
      id: '/demo/tanstack-query'
      path: '/demo/tanstack-query'
      fullPath: '/demo/tanstack-query'
      preLoaderRoute: typeof DemoTanstackQueryRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard/assessment-builder': {
      id: '/_authenticated/dashboard/assessment-builder'
      path: '/assessment-builder'
      fullPath: '/dashboard/assessment-builder'
      preLoaderRoute: typeof AuthenticatedDashboardAssessmentBuilderRouteImport
      parentRoute: typeof AuthenticatedDashboardRouteRoute
    }
  }
}

interface AuthenticatedDashboardRouteRouteChildren {
  AuthenticatedDashboardAssessmentBuilderRoute: typeof AuthenticatedDashboardAssessmentBuilderRoute
}

const AuthenticatedDashboardRouteRouteChildren: AuthenticatedDashboardRouteRouteChildren =
  {
    AuthenticatedDashboardAssessmentBuilderRoute:
      AuthenticatedDashboardAssessmentBuilderRoute,
  }

const AuthenticatedDashboardRouteRouteWithChildren =
  AuthenticatedDashboardRouteRoute._addFileChildren(
    AuthenticatedDashboardRouteRouteChildren,
  )

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRoute,
  AuthenticatedDashboardRouteRoute:
    AuthenticatedDashboardRouteRouteWithChildren,
  DemoTanstackQueryRoute: DemoTanstackQueryRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
